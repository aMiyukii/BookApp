@using BookApp.Core.DTO
@model BookApp.Models.AddBookViewModel
@{
    ViewData["Title"] = "Add book to library";
}

<html>
<head>
    <link rel="stylesheet" href="~/css/AddBook.css" asp-append-version="true" />
    <script src="https://kit.fontawesome.com/de6521028c.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
    <div class="grid-column">
        <div class="grid-item">
            @using (Html.BeginForm("SaveBook", "AddBook", FormMethod.Post))
            {
                <div class="d-flex">
                    <i class="fa-solid fa-magnifying-glass"></i>
                    <input class="searchbar" type="search" placeholder="Search book" aria-label="Search">
                </div>

                <h1 class="AddCategory">Add standard category - <i>required</i></h1>
                <div class="dropdown">
                    <label for="standard-category-options"></label>
                    <div class="dropdownClone" id="dropdownContainer">
                        <select name="standard-category-options" id="standard-category-options" onchange="setChosenCategory()">
                            <option selected>Select a category</option>
                            @foreach (var category in Model.Categories.Where(c => c.IsStandard))
                            {
                                <option value="@category.Id">@category.Name</option>
                            }  
                        </select>
                    </div>
                </div>

                <h1 class="AddCategoryOp">Add your own category - <i>optional</i></h1>
                <div class="dropdownOp">
                    <label for="optional-category-options"></label>
                    <div class="dropdownClone" id="dropdownContainer">
                        <select name="optional-category-options" id="optional-category-options" onchange="setChosenCategory()">
                            <option selected>Select a category</option>
                            @foreach (var category in Model.Categories.Where(c => !c.IsStandard))
                            {
                                <option value="@category.Id">@category.Name</option>
                            }   
                        </select>   
                    </div>
                </div>

                <input type="hidden" id="chosenBookId" name="chosenBookId" value="" />
                <input type="hidden" id="chosenCategoryId1" name="chosenCategoryId1" value="" />
                <input type="hidden" id="chosenCategoryId2" name="chosenCategoryId2" value="" />
                <button type="submit" class="AddBookButton">Add book</button>
            }
        </div>
        <div class="grid-item2">
            <div class="BookList">
                @foreach (var bookDTO in Model.Books)
                {
                    <div class="grid-item3" data-book-id="@bookDTO.Id" onclick="handleBookClick(event)">
                        <div class="BookImage">
                            <img src="@bookDTO.ImageUrl" class="BookImage" />
                        </div>
                        <div class="BookTitle">
                            <p>@bookDTO.Title</p>
                        </div>
                        <div class="BookAuthor">
                            <p>@bookDTO.Author</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="chosenbook">
        <div class="BookImagechosen">
            <img id="chosenImage" class="image" style="display: none;" />
        </div>
        <div class="BookTitlechosen">
            <p id="chosenTitle"></p>
        </div>
        <div class="BookAuthorchosen">
            <p id="chosenAuthor"></p>
        </div>
    </div>

    <script>
        // Function to handle search input
        function handleSearch() {
            var input = document.querySelector('.searchbar');
            var filter = input.value.toUpperCase();
            var books = document.querySelectorAll('.grid-item3');
        
            books.forEach(function(book) {
                var titleElement = book.querySelector('.BookTitle p');
                var authorElement = book.querySelector('.BookAuthor p');
                var title = titleElement.textContent.toUpperCase();
                var author = authorElement.textContent.toUpperCase();
        
                if (title.includes(filter) || author.includes(filter)) {
                    book.style.display = "";
                } else {
                    book.style.display = "none";
                }
            });
        }

        // Function to clear search input and show all books
        function clearSearch() {
            var input = document.querySelector('.searchbar');
            input.value = "";
            var books = document.querySelectorAll('.grid-item3');

            books.forEach(function(book) {
                book.style.display = "";
            });
        }

        // Attach event listener to search input
        document.querySelector('.searchbar').addEventListener('input', function() {
            handleSearch();
        });
        
        function displayErrorMessage(message) {
            Swal.fire('Error!', message, 'error');
        }

        window.onload = function () {
            var errorMessage = "@TempData["ErrorMessage"]";
            if (errorMessage) {
                displayErrorMessage(errorMessage);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            var successMessage = "@TempData["SuccessMessage"]";
            if (successMessage) {
                displaySuccessMessage(successMessage);
            }
        });

        function handleBookClick(event) {
            var clickedElement = event.target.closest('.grid-item3');
            if (clickedElement) {
                var bookId = clickedElement.getAttribute('data-book-id');
                document.getElementById('chosenBookId').value = bookId;

                var title = clickedElement.querySelector('.BookTitle p').textContent;
                var author = clickedElement.querySelector('.BookAuthor p').textContent;
                var imageUrl = clickedElement.querySelector('.BookImage img').src;
                displayChosenBook(title, author, imageUrl);
            }
        }

        function displayChosenBook(title, author, imageUrl) {
            var chosenBookTitle = document.getElementById('chosenTitle');
            var chosenBookAuthor = document.getElementById('chosenAuthor');
            var chosenBookImage = document.getElementById('chosenImage');

            chosenBookTitle.textContent = title;
            chosenBookAuthor.textContent = author;
            chosenBookImage.src = imageUrl;

            chosenBookImage.style.display = 'block';
        }

        function setChosenCategory() {  
            var categoryId1 = document.getElementById('standard-category-options').value;
            var categoryId2 = document.getElementById('optional-category-options').value;
            document.getElementById('chosenCategoryId1').value = categoryId1;
            document.getElementById('chosenCategoryId2').value = categoryId2;
        }
    </script>

</body>
</html>
