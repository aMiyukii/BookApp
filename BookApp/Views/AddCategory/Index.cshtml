@model BookApp.Models.AddCategoryViewModel
@{
    ViewData["Title"] = "Add category";
}

<html>
<head>
    <link rel="stylesheet" href="~/css/AddCategory.css" asp-append-version="true"/>
    <link rel="stylesheet" href="path/to/bootstrap/css/bootstrap.min.css">
        <link rel="stylesheet" href="path/to/font-awesome/css/font-awesome.min.css">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
@using (Html.BeginForm("AddCategoryName", "AddCategory", FormMethod.Post))
{
    <div class="CategoryInformation">
        <h1 class="CategoryName">Add category name</h1>
        @Html.AntiForgeryToken()
        @Html.TextBoxFor(model => model.Name, new { id = "AddPatternName", placeholder = "Enter category name..." })
    </div>

    <button type="submit" class="AddCategoryButton">Add category</button>
}

<div class="Categories">
    @if (Model.Categories != null)
    {
        <p class="categorytype">Standard Categories</p>
        @foreach (var categoryDTO in Model.Categories.Where(c => c.IsStandard == true))
        {
            <p class="categoryNameStand">@categoryDTO.Name</p>
            <div class="Icons">
            </div>
            <hr class="LineStand">
        }

        <p class="categorytype">Your Categories</p>
        @foreach (var categoryDTO in Model.Categories.Where(c => c.IsStandard == false))
        {
            <div class="categoryItem" data-id="@categoryDTO.Id">
                <p class="categoryNames">@categoryDTO.Name</p>
                <div class="Icons">
                    <i class="fa-solid fa-pen-to-square edit-icon"></i>
                    <i class="fa-solid fa-trash-can delete-icon"></i>
                </div>
            </div>
            <hr class="line">
        }
    }
    else
    {
        <p>No categories available.</p>
    }
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function() {
        // Edit category
        $('.edit-icon').click(async function() {
            var categoryId = $(this).closest('.categoryItem').data('id');
            var currentName = $(this).closest('.categoryItem').find('.categoryNames').text();
    
            const { value: newName } = await Swal.fire({
                title: 'Edit category name',
                input: 'text',
                inputLabel: 'Category name',
                inputValue: currentName,
                showCancelButton: true,
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to write something!';
                    }
                }
            });
    
            if (newName) {
                $.ajax({
                    url: '@Url.Action("UpdateCategoryName", "AddCategory")',
                    type: 'POST',
                    data: { id: categoryId, newName: newName },
                    success: function(data) {
                        if (data.success) {
                            Swal.fire('Updated!', 'The category name has been updated.', 'success').then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire('Error!', data.message || 'Error updating category name.', 'error');
                        }
                    },
                    error: function() {
                        Swal.fire('Error!', 'There was an error updating the category name.', 'error');
                    }
                });
            }
        });

        // Delete category
        $('.delete-icon').click(function() {
            var categoryId = $(this).closest('.categoryItem').data('id');
            Swal.fire({
                title: 'Are you sure?',
                text: 'The category will be deleted',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post('@Url.Action("DeleteCategory", "AddCategory")', { id: categoryId }, function(data) {
                        Swal.fire('Deleted!', 'The category has been deleted.', 'success').then(() => {
                            location.reload();
                        });
                    });
                }
            });
        });

        $(document).ready(function() {
            // Add category
            $('.AddCategoryButton').click(function(e) {
                e.preventDefault(); // Prevent form submission
                var categoryName = $('#AddPatternName').val();
                if (categoryName.trim() !== '') {
                    $.post('@Url.Action("AddCategoryName", "AddCategory")', { Name: categoryName })
                        .done(function(data) {
                            if (data.success) {
                                Swal.fire('Added!', 'The category has been added.', 'success').then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire('Error!', `Category with the name "${categoryName}" already exists.`, 'error');
                            }
                        })
                        .fail(function() {
                            Swal.fire('Error!', 'There was an error adding the category.', 'error');
                        });
                } else {
                    Swal.fire('Error!', 'Please enter a category name.', 'error');
                }
                $('#AddPatternName').val('');
            });
        });


    });
</script>

</body>
</html>
